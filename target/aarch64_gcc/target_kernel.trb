# -*- coding: utf-8 -*-
# 
#		パス2の生成スクリプトのターゲット依存部（ダミーターゲット用）
#
#   $Id: target_kernel.trb 572 2016-02-01 14:40:09Z ertl-hiro $
# 

# 
#  使用できる割込み番号とそれに対応する割込みハンドラ番号
# 
$INTNO_VALID = [ *(0..63) ]
$INHNO_VALID = $INTNO_VALID

#
#  有効なCPU例外ハンドラ番号
#
$EXCNO_VALID = [ 0, 1, 2, 3, 4, 7, 8, 11, 12, 15 ]

#
#  DEF_EXCで使用できるCPU例外ハンドラ番号
#
$EXCNO_DEFEXC_VALID = [  0, 1, 2, 3, 4, 7, 8, 11, 12, 15  ]

#
#  ターゲット非依存部のインクルード
#
IncludeTrb("kernel/kernel.trb")

#
#  割込みハンドラテーブル
#
$kernelCfgC.comment_header("Interrupt Handler Table")

$kernelCfgC.add("const FP _kernel_inh_table[TNUM_INHNO] = {")
$INHNO_VALID.each_with_index do |inhnoVal, index|
  $kernelCfgC.add(",") if index > 0
  $kernelCfgC.append("\t/* 0x#{sprintf("%03x", inhnoVal)} */ ")
  if $cfgData[:DEF_INH].has_key?(inhnoVal)
    $kernelCfgC.append("(FP)(#{$cfgData[:DEF_INH][inhnoVal][:inthdr]})")
  else
    $kernelCfgC.append("(FP)(_kernel_default_int_handler)")
  end
end
$kernelCfgC.add
$kernelCfgC.add2("};")

#
#  割込み要求ライン設定テーブル
#

$kernelCfgC.comment_header("Interrupt Configuration Table")

$kernelCfgC.add("const uint8_t _kernel_intcfg_table[TNUM_INTNO] = {")
$INTNO_VALID.each_with_index do |intnoVal, index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t/* 0x#{sprintf("%03x", intnoVal)} */ ")
    if $cfgData[:CFG_INT].has_key?(intnoVal)
      $kernelCfgC.append("1U")
    else
      $kernelCfgC.append("0U")
    end
end
$kernelCfgC.add
$kernelCfgC.add2("};")

#
#  CPU例外ハンドラテーブル
#
$kernelCfgC.comment_header("CPU Exception Handler Table")

$kernelCfgC.add("const FP _kernel_exc_table[TNUM_EXCNO] = {")
$EXCNO_VALID.each_with_index do |excnoVal, index|
  $kernelCfgC.add(",") if index > 0
  $kernelCfgC.append("\t/* #{excnoVal} */ ")
  if $cfgData[:DEF_EXC].has_key?(excnoVal)
    $kernelCfgC.append("(FP)(#{$cfgData[:DEF_EXC][excnoVal][:exchdr]})")
  else
    $kernelCfgC.append("(FP)(_kernel_default_exc_handler)")
  end
end
$kernelCfgC.add
$kernelCfgC.add2("};")
